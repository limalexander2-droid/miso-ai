let currentQuestion = 0;
let answers = [];

const container = document.getElementById("question-container");
const answerButtons = document.getElementById("answer-buttons");
const resultContainer = document.getElementById("result");
const loadingContainer = document.getElementById("loading");
const quizContainer = document.getElementById("quiz");

const loadingMessages = [
  { emoji: "üç£", text: "Plating your cravings‚Ä¶" },
  { emoji: "üçú", text: "Asking the kitchen for something special‚Ä¶" },
  { emoji: "ü•¢", text: "Warming up the noodles‚Ä¶" },
  { emoji: "üç±", text: "Tossing ideas into the wok‚Ä¶" },
  { emoji: "üå∂Ô∏è", text: "Sniffing out nearby bites‚Ä¶" },
  { emoji: "üß†", text: "Thinking with my stomach‚Ä¶" },
  { emoji: "ü•°", text: "Grabbing extra napkins‚Ä¶" },
  { emoji: "üßÇ", text: "Scouting the sauce section‚Ä¶" },
  { emoji: "üë®‚Äçüç≥", text: "Consulting my inner foodie‚Ä¶" }
];

function updateQuestionProgress() {
  const bar = document.getElementById("question-progress");
  if (!bar) return;
  const answered = currentQuestion; // completed so far
  const percent = Math.min(100, Math.round((answered / questions.length) * 100));
  bar.style.width = `${percent}%`;
}

// Quiz Questions
const questions = [
  {
    question: "How hungry are you right now?",
    options: ["Just a little hungry", "Pretty hungry", "Starving", "Planning ahead"]
  },
  {
    question: "How much time do you have to eat?",
    options: ["Less than 15 minutes", "About 30 minutes", "An hour or more", "No rush"]
  },
  {
    question: "Who are you eating with?",
    options: ["Just me", "With a friend or partner", "Small group (3‚Äì4)", "Big group or family", "Doesn‚Äôt matter"]
  },
  {
    question: "What‚Äôs your current mood?",
    options: ["Cozy / comfort food", "Energized / healthy", "Indulgent / treat yourself", "Adventurous", "Chill / no strong cravings"]
  },
  {
    question: "Are you craving anything specific?",
    options: ["Spicy", "Sweet", "Hot and hearty", "Fresh and light", "No specific craving"]
  },
  {
    question: "Any dietary goals or restrictions?",
    options: ["Weight loss / low-cal", "Vegetarian / Vegan", "Gluten-Free", "Low-Carb / Keto", "High-Protein", "No restrictions"]
  },
  {
    question: "How much are you looking to spend?",
    options: ["Under $10", "$10‚Äì$20", "$20‚Äì$40", "Money‚Äôs not a concern"]
  },
  {
    question: "How far are you willing to go?",
    options: ["Walking distance", "Short drive (under 10 mins)", "15‚Äì30 mins", "I'll go anywhere"]
  },
  {
    question: "How would you like to eat today?",
    options: ["Dine-in", "Takeout", "Delivery", "Drive-thru", "Doesn‚Äôt matter"]
  },
  {
    question: "Any special occasion or vibe?",
    options: ["Just a regular meal", "Quick lunch break", "Date night", "Post-workout", "Comfort after a long day", "Celebration"]
  }
];

// Show the current question
function showQuestion() {
  resultContainer.classList.add("hidden");
  quizContainer.classList.remove("hidden");

  // Update progress text
  const progressIndicator = document.getElementById("progress-indicator");
  progressIndicator.textContent = `Question ${currentQuestion + 1} of ${questions.length}`;

  const question = questions[currentQuestion];
  container.innerHTML = `
    <div class="card fade-in">
      <div class="question">${question.question}</div>
    </div>
  `;
  answerButtons.innerHTML = "";

  question.options.forEach((option, index) => {
    const button = document.createElement("button");
    button.innerText = option;
    button.className = `
  bg-white text-gray-700 text-sm sm:text-base px-4 py-2 sm:px-5 sm:py-3 rounded-xl shadow-sm border border-gray-200
  hover:bg-rose-100 hover:text-rose-700 transition-all duration-200 ease-out
  focus:outline-none focus:ring-2 focus:ring-rose-400 focus:ring-offset-2
`;

    button.addEventListener("click", () => selectAnswer(option));
    answerButtons.appendChild(button);
  });
}

// Handle answer selection
function selectAnswer(answer) {
  answers.push({ question: questions[currentQuestion].question, answer });
  currentQuestion++;
  updateQuestionProgress();

  if (currentQuestion < questions.length) {
    showQuestion();
  } else {
    showResults();
  }
}

// Show results placeholder
function showResults() {
  quizContainer.classList.add("hidden");

// Play sound
const sound = document.getElementById("miso-sound");
if (sound) sound.play().catch(() => {}); // avoid autoplay errors

  loadingContainer.classList.remove("hidden");
const progressBar = document.getElementById("progress-bar");
progressBar.style.width = "0%";

// Animate from 0% to 100%
let progress = 0;
const interval = setInterval(() => {
  progress += 2;
  progressBar.style.width = `${progress}%`;

  if (progress >= 100) {
    clearInterval(interval);
  }
}, 50); // Adjust speed here (50ms x 50 steps = 2.5s)

  const loadingText = loadingContainer.querySelector("p");
const loadingEmoji = document.getElementById("loading-emoji");

let messageIndex = 0;
function updateLoadingMessage() {
  const { emoji, text } = loadingMessages[messageIndex];
  loadingText.textContent = text;
  loadingEmoji.textContent = emoji;

  messageIndex = (messageIndex + 1) % loadingMessages.length;
}

// Show the first message immediately
updateLoadingMessage();

// Then rotate every 800ms
const messageInterval = setInterval(updateLoadingMessage, 800);


  // Simulate Miso "thinking"
  setTimeout(() => {
  loadingContainer.classList.add("hidden");
  resultContainer.classList.remove("hidden");
  clearInterval(messageInterval);

  // Fill the existing results area instead of replacing the whole section
  const display = document.getElementById("results-display");
  display.innerHTML = answers
    .map(a => `<p><strong>${a.question}</strong><br><span class="text-rose-600">‚Üí ${a.answer}</span></p>`)
    .join("<hr class='my-2' />");
}, 2500);
 // Adjust this time if needed
}

// Restart quiz
const restartBtn = document.getElementById("restart-btn");
if (restartBtn) {
  restartBtn.addEventListener("click", () => {
    // Scroll to top
    window.scrollTo({ top: 0, behavior: "smooth" });

    // 1) reset state
    currentQuestion = 0;
    answers = [];

    // 2) stop any loading animation interval (if you started one in showResults)
    if (window.loadingInterval) {
      clearInterval(window.loadingInterval);
      window.loadingInterval = null;
    }

    // 3) reset both progress bars
    const qBar = document.getElementById("question-progress");
    if (qBar) qBar.style.width = "0%";
    const lb = document.getElementById("progress-bar");
    if (lb) lb.style.width = "0%";

    // 4) reset screens
    document.getElementById("result")?.classList.add("hidden");
    document.getElementById("loading")?.classList.add("hidden");
    document.getElementById("quiz")?.classList.remove("hidden");

    // 5) render first question & ensure bar text/width reflect 0%
    showQuestion();
    if (typeof updateQuestionProgress === "function") updateQuestionProgress();
  });
}


// Start the quiz

showQuestion();
updateQuestionProgress();

